scenarioName: "mqttToKafka"

rampUpSeconds: 10
rampUpSeconds: ${?MQTT_LOAD_RAMP_UP_SECONDS}

actionsDuringRampUp: true
actionsDuringRampUp: ${?MQTT_LOAD_ACTIONS_DURING_RAMP_UP}

//durationSeconds: 60
durationSeconds: 120

//topicsPerNode = 10
topicsPerNode = 100
//topicGroupsPerNode = 2
topicGroupsPerNode = 10
//publishingClientsPerNode = 1
//publishingClientsPerNode = 6
//publishingClientsPerNode = 10
publishingClientsPerNode = 100
clientMessagesPerSecond = 1.0

topicPrefix: "mqtt-testsuite"
topicPrefix: ${?MQTT_LOAD_TOPIC_PREFIX}
clientPrefix: "mqtt-testsuite-"
clientPrefix: ${?MQTT_LOAD_CLIENT_PREFIX}
randomizeClientPrefix: true
randomizeClientPrefix: ${?MQTT_LOAD_RANDOMIZE_CLIENT_PREFIX}

//qos: 0
qos: 2

//messageMinSize: 50
messageMinSize: 800
messageMinSize: ${?MQTT_LOAD_MESSAGE_MIN_SIZE}
//messageMaxSize: 100
messageMaxSize: 1200
messageMaxSize: ${?MQTT_LOAD_MESSAGE_MAX_SIZE}

kafkaTopics: "mqtt_messages"
kafkaTopics: ${?MQTT_LOAD_KAFKA_DEFAULT_TOPIC}
kafkaTopics: ${?MQTT_LOAD_KAFKA_TOPICS}
# If the test scenario should use Kafka message timestamp to calculate latency
useKafkaTimestampForLatency: false
useKafkaTimestampForLatency: ${?MQTT_LOAD_USE_KAFKA_TIMESTAMP_FOR_LATENCY}

connectionMonkey {
//  intermittentClientsPercentage: 0
//  intermittentClientsPercentage: 20
  intermittentClientsPercentage: 50
//  intermittentClientsPercentage: 100
  averageClientUptimeSeconds: 10
//  averageClientUptimeSeconds: 30
  averageClientDowntimeSeconds: 5
//  averageClientDowntimeSeconds: 10
  timeSdSeconds: 2
}
