scenarioName: "mqttToKafka"

rampUpSeconds: 10
rampUpSeconds: ${?MQTT_LOAD_RAMP_UP_SECONDS}

actionsDuringRampUp: true
actionsDuringRampUp: ${?MQTT_LOAD_ACTIONS_DURING_RAMP_UP}

durationSeconds: 32
durationSeconds: ${?MQTT_LOAD_DURATION_SECONDS}

topicsPerNode = 100
topicsPerNode = ${?MQTT_LOAD_TOPICS_PER_NODE}
topicGroupsPerNode = 10
topicGroupsPerNode = ${?MQTT_LOAD_TOPIC_GROUPS_PER_NODE}
publishingClientsPerNode = 10
publishingClientsPerNode = ${?MQTT_LOAD_PUBLISHING_CLIENTS_PER_NODE}
clientMessagesPerSecond = 1.0
clientMessagesPerSecond = ${?MQTT_LOAD_PUBLISHING_CLIENT_MESSAGES_PER_SECOND}

topicPrefix: "mqtt-testsuite"
topicPrefix: ${?MQTT_LOAD_TOPIC_PREFIX}
clientPrefix: "mqtt-testsuite-"
clientPrefix: ${?MQTT_LOAD_CLIENT_PREFIX}
randomizeClientPrefix: true
randomizeClientPrefix: ${?MQTT_LOAD_RANDOMIZE_CLIENT_PREFIX}

qos: 0
qos: ${?MQTT_LOAD_QOS}
qos: ${?MQTT_LOAD_PUBLISH_QOS}

messageMinSize: 10
messageMinSize: ${?MQTT_LOAD_MESSAGE_MIN_SIZE}
messageMaxSize: 600
messageMaxSize: ${?MQTT_LOAD_MESSAGE_MAX_SIZE}

kafkaTopics: "mqtt_messages"
kafkaTopics: ${?MQTT_LOAD_KAFKA_DEFAULT_TOPIC}
kafkaTopics: ${?MQTT_LOAD_KAFKA_TOPICS}
# If the test scenario should use Kafka message timestamp to calculate latency
useKafkaTimestampForLatency: false
useKafkaTimestampForLatency: ${?MQTT_LOAD_USE_KAFKA_TIMESTAMP_FOR_LATENCY}

connectionMonkey {
  intermittentClientsPercentage: 5
  averageClientUptimeSeconds: 200
  averageClientDowntimeSeconds: 15
  timeSdSeconds: 5
}