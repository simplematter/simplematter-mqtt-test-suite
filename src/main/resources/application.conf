
stepIntervalMillis: 1000
stepIntervalMillis: ${?MQTT_LOAD_STEP_INTERVAL_MILLIS}

completionTimeoutMillis: 10000
completionTimeoutMillis: ${?MQTT_LOAD_COMPLETION_TIMEOUT_MILLIS}

#empty to generate random
nodeId: ${?MQTT_LOAD_NODE_ID}

expectedRunnerNodesCount = 1
expectedRunnerNodesCount = ${?MQTT_LOAD_EXPECTED_RUNNER_NODES_COUNT}
expectedAggregatorNodesCount = 0
expectedAggregatorNodesCount = ${?MQTT_LOAD_EXPECTED_AGGREGATOR_NODES_COUNT}

scenarioConfigInline = ${?MQTT_LOAD_SCENARIO_CONFIG_INLINE}
scenarioConfigPath = ${?MQTT_LOAD_SCENARIO_CONFIG_PATH}

stats {
  statsPrintingIntervalMillis: 5000
  statsPrintingIntervalMillis: ${?MQTT_LOAD_STATS_PRINTING_INTERVAL_MILLIS}
  statsUploadIntervalMillis: 1000
  statsUploadIntervalMillis: ${?MQTT_LOAD_STATS_UPLOADING_INTERVAL_MILLIS}
  #Should it check delivery status of the individual messages. Pre-requisite for the advanced checks, but significantly hurts the latency figures
  individualMessageTracking: true
  individualMessageTracking: ${?MQTT_LOAD_STATS_INDIVIDUAL_MESSAGE_TRACKING}
  errorsDetectionLoopIntervalMillis: 10000
  errorsDetectionLoopIntervalMillis: ${?MQTT_LOAD_STATS_ERRORS_DETECTION_LOOP_INTERVAL_MILLIS}
  considerMessageMissingTimeoutMillis: 30000
  considerMessageMissingTimeoutMillis: ${?MQTT_LOAD_STATS_CONSIDER_MESSAGE_MISSING_TIMEOUT_MILLIS}
  maxErrors: 1000
  maxErrors: ${?MQTT_LOAD_STATS_MAX_ERRORS}
  statsPort: ${?MQTT_LOAD_STATS_PORT}
  printIssuesReport: false
  printIssuesReport: ${?MQTT_LOAD_STATS_PRINT_ISSUES_REPORT}
}

hazelcast {
  port: ${?MQTT_LOAD_HAZELCAST_PORT}
  seedMembers: ${?MQTT_LOAD_HAZELCAST_SEED_MEMBERS}
  k8sNamespace: ${?MQTT_LOAD_HAZELCAST_K8S_NAMESPACE}
  k8sPodLabelName: ${?MQTT_LOAD_HAZELCAST_K8S_POD_LABEL_NAME}
  k8sPodLabelValue: ${?MQTT_LOAD_HAZELCAST_K8S_POD_LABEL_VALUE}
  k8sApiRetries: 5
  k8sApiRetries: ${?MQTT_LOAD_HAZELCAST_API_RETRIES}
  minNodesMaxWaitSeconds: 300
  minNodesMaxWaitSeconds: ${?MQTT_LOAD_HAZELCAST_MIN_NODES_MAX_WAIT_SECONDS}
}

mqtt {
  server: "localhost:1883"
  server: ${?MQTT_LOAD_SERVER}
  connectionTimeoutSeconds: 60
  connectionTimeoutSeconds: ${?MQTT_LOAD_CONNECTION_TIMEOUT_SECONDS}
  subscribeTimeoutSeconds: 600
  subscribeTimeoutSeconds: ${?MQTT_LOAD_SUBSCRIBE_TIMEOUT_SECONDS}
  keepAliveSeconds: 180
  keepAliveSeconds: ${?MQTT_LOAD_KEEP_ALIVE_SECONDS}
  autoKeepAlive: false
  autoKeepAlive: ${?MQTT_LOAD_AUTO_KEEP_ALIVE}
  maxRetransmissionAttempts: 3
  maxRetransmissionAttempts: ${?MQTT_LOAD_MAX_RETRANSMISSION_ATTEMPTS}
  statusCheckIntervalSeconds: 10
  statusCheckIntervalSeconds: ${?MQTT_LOAD_STATUS_CHECK_INTERVAL_SECONDS}
  persistentSession: false
  persistentSession: ${?MQTT_LOAD_PERSISTENT_SESSION}
  messageMaxSize: 1000000
  messageMaxSize: ${?MQTT_LOAD_MESSAGE_MAX_SIZE}
}

kafka {
  bootstrapServers = "PLAINTEXT://localhost:9092"
  bootstrapServers = ${?KAFKA_BOOTSTRAP_SERVERS}
  bootstrapServers = ${?MQTT_LOAD_KAFKA_BOOTSTRAP_SERVERS}

  #ssl.endpoint.identification.algorithm for producer and consumer
  sslEndpointIdentificationAlgorithm = ${?KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM}
  #sasl.jaas.config for producer and consumer
  saslJaasConfig = ${?KAFKA_SASL_JAAS_CONFIG}
  #`sasl.mechanism` for producer and consumer
  saslMechanism = ${?KAFKA_SASL_MECHANISM}
  #security.protocol for producer and consumer
  securityProtocol = "PLAINTEXT"
  securityProtocol = ${?KAFKA_SECURITY_PROTOCOL}
  #linger.ms for producer
  lingerMs = 100
  lingerMs = ${?KAFKA_PRODUCER_LINGER_MS}
  #batch.size for producer
  batchSize = 65392
  batchSize = ${?KAFKA_BATCH_SIZE}
  #compression.type for producer. Valid values are none, gzip, snappy, lz4
  compressionType = "snappy"
  compressionType = ${?KAFKA_COMPRESSION_TYPE}
  #request.timeout.ms for producer and consumer
  requestTimeoutMs = 30000
  requestTimeoutMs = ${?KAFKA_REQUEST_TIMEOUT_MS}
  #retry.backoff.ms for producer and consumer
  retryBackoffMs = 100
  retryBackoffMs = ${?KAFKA_RETRY_BACKOFF_MS}
  #`max.block.ms` for producer
  maxBlockMs = 60000
  maxBlockMs = ${?KAFKA_MAX_BLOCK_MS}
  #`buffer.memory` for producer. Default is 32MB
  bufferMemory = 33554432
  bufferMemory = ${?KAFKA_BUFFER_MEMORY}
  #`fetch.min.bytes` for consumer. Default is 1
  fetchMinBytes = 1
  fetchMinBytes = ${?KAFKA_FETCH_MIN_BYTES}
  #`fetch.max.bytes` for consumer. Default is 50 MB
  fetchMaxBytes = 52428800
  fetchMaxBytes = ${?KAFKA_FETCH_MAX_BYTES}
  #`fetch.max.wait.ms` for consumer. Default is 500
  fetchMaxWaitMs = 500
  fetchMaxWaitMs = ${?KAFKA_FETCH_MAX_WAIT_MS}

  #`acks` for producer. Valid values are "all", "-1", "0", "1". "all" and "-1" are equivalent
  producerAcks = "all"
  producerAcks = ${?KAFKA_PRODUCER_ACKS}

  pollTimeoutMs = 50
  pollTimeoutMs = ${?KAFKA_POLL_MS}
}

monitoring {
  port = 1884
  port = ${?MQTT_LOAD_MONITORING_PORT}
  metricsEndpoint = "/metrics"
  metricsEndpoint = ${?MQTT_LOAD_MONITORING_METRICS_ENDPOINT}
  includeJavaMetrics = true
  includeJavaMetrics = ${?MQTT_LOAD_MONITORING_INCLUDE_JAVA_METRICS}
}

errorInjection {
  publishDuplicatePercentage = 0
  publishDuplicatePercentage = ${?MQTT_LOAD_PUBLISH_DUPLICATE_PERCENTAGE}
  publishMissedPercentage = 0
  publishMissedPercentage = ${?MQTT_LOAD_PUBLISH_MISSED_PERCENTAGE}
  receiveDuplicatePercentage = 0
  receiveDuplicatePercentage = ${?MQTT_LOAD_RECEIVE_DUPLICATE_PERCENTAGE}
  receiveMissedPercentage = 0
  receiveMissedPercentage = ${?MQTT_LOAD_RECEIVE_MISSED_PERCENTAGE}
}